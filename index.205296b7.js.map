{"mappings":"ACEA,SAAS,EAAQ,CAAO,CAAE,CAAS,EACjC,OAAO,IAAI,QAAQ,SAAC,CAAA,CAAS,CAA7B,EACE,EAAQ,gBAAgB,CAAC,QAAS,SAAC,CAAnC,EAEM,EAAE,MAAM,GAAK,GAEf,EAEG,UAAsC,MAAA,CAA7B,EAAU,qBAA4C,MAAA,CAAzB,EAAQ,QAAQ,CAAC,UAAmB,MAAA,CAAX,EAAQ,EAAE,CAAC,KAGjF,GAEA,EAAQ,gBAAgB,CAAC,cAAe,SAAC,CAAzC,EAEM,EAAE,MAAM,GAAK,GAEf,EAEG,UAAsC,MAAA,CAA7B,EAAU,qBAA4C,MAAA,CAAzB,EAAQ,QAAQ,CAAC,UAAmB,MAAA,CAAX,EAAQ,EAAE,CAAC,KAGjF,GAEA,EAAQ,gBAAgB,CAAC,OAAQ,SAAC,CAAlC,EAEM,EAAE,MAAM,GAAK,GACf,EACG,UAAsC,MAAA,CAA7B,EAAU,qBAA4C,MAAA,CAAzB,EAAQ,QAAQ,CAAC,UAAmB,MAAA,CAAX,EAAQ,EAAE,CAAC,KAGjF,EACF,EACF,CAEA,IAAM,EAAe,SAAC,CAAtB,EACE,IAAM,EAAS,SAAS,aAAa,CAAC,OAGhC,EAAa,SAAS,cAAc,CAAC,EAE3C,CAAA,EAAO,SAAS,CAAG,UACnB,EAAO,WAAW,CAAC,GAGnB,SAAS,IAAI,CAAC,qBAAqB,CAAC,cAAe,EACrD,EAEM,EAAa,SAAS,cAAc,CAAC,SACrC,EAAgB,SAAS,cAAc,CAAC,YACxC,EAAS,SAAS,cAAc,CAAC,UAEvC,EAAQ,EAAY,SAAS,IAAI,CAAC,GAClC,EAAQ,EAAe,SAAS,IAAI,CAAC,GACrC,EAAQ,EAAQ,SAAS,IAAI,CAAC,GAE9B,EAAQ,EAAY,SAAS,IAAI,CAAC,GAClC,EAAQ,EAAe,SAAS,IAAI,CAAC,GAErC,EAAQ,EAAY,QAAQ,IAAI,CAAC,GACjC,EAAQ,EAAe,QAAQ,IAAI,CAAC,GACpC,EAAQ,EAAQ,QAAQ,IAAI,CAAC","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction waitFor(element, eventName) {\n    return new Promise(function(resolve, reject) {\n        element.addEventListener(\"click\", function(e) {\n            // our event is click\n            if (e.target === element) // when our elemnt is\n            resolve(// element wich called event we resolve promise\n            \"It was \".concat(eventName, \" on the element: \").concat(element.nodeName, \", id: \").concat(element.id, \".\")); // we resolve string with data\n        });\n        element.addEventListener(\"contextmenu\", function(e) {\n            // we exchange our event\n            if (e.target === element) // we doing the same\n            resolve(// check out if element is that what we need\n            \"It was \".concat(eventName, \" on the element: \").concat(element.nodeName, \", id: \").concat(element.id, \".\"));\n        });\n        element.addEventListener(\"blur\", function(e) {\n            // also use it with blur\n            if (e.target === element) resolve(\"It was \".concat(eventName, \" on the element: \").concat(element.nodeName, \", id: \").concat(element.id, \".\"));\n        });\n    });\n}\nvar printMessage = function(message) {\n    var newDiv = document.createElement(\"div\"); // create new div\n    // create content with message\n    var newContent = document.createTextNode(message);\n    newDiv.className = \"message\"; // give a class\n    newDiv.appendChild(newContent); // append content in a div\n    // insert div in html\n    document.body.insertAdjacentElement(\"beforebegin\", newDiv);\n};\nvar loginField = document.getElementById(\"login\");\nvar passwordField = document.getElementById(\"password\");\nvar button = document.getElementById(\"submit\");\nwaitFor(loginField, \"click\").then(printMessage);\nwaitFor(passwordField, \"click\").then(printMessage);\nwaitFor(button, \"click\").then(printMessage);\nwaitFor(loginField, \"input\").then(printMessage);\nwaitFor(passwordField, \"input\").then(printMessage);\nwaitFor(loginField, \"blur\").then(printMessage);\nwaitFor(passwordField, \"blur\").then(printMessage);\nwaitFor(button, \"blur\").then(printMessage);\n\n//# sourceMappingURL=index.205296b7.js.map\n","'use strict';\n\nfunction waitFor(element, eventName) {\n  return new Promise((resolve, reject) => {\n    element.addEventListener('click', (e) => {\n      // our event is click\n      if (e.target === element) {\n        // when our elemnt is\n        resolve(\n          // element wich called event we resolve promise\n          `It was ${eventName} on the element: ${element.nodeName}, id: ${element.id}.`,\n        ); // we resolve string with data\n      }\n    });\n\n    element.addEventListener('contextmenu', (e) => {\n      // we exchange our event\n      if (e.target === element) {\n        // we doing the same\n        resolve(\n          // check out if element is that what we need\n          `It was ${eventName} on the element: ${element.nodeName}, id: ${element.id}.`,\n        );\n      }\n    });\n\n    element.addEventListener('blur', (e) => {\n      // also use it with blur\n      if (e.target === element) {\n        resolve(\n          `It was ${eventName} on the element: ${element.nodeName}, id: ${element.id}.`,\n        );\n      }\n    });\n  });\n}\n\nconst printMessage = (message) => {\n  const newDiv = document.createElement('div'); // create new div\n\n  // create content with message\n  const newContent = document.createTextNode(message);\n\n  newDiv.className = 'message'; // give a class\n  newDiv.appendChild(newContent); // append content in a div\n\n  // insert div in html\n  document.body.insertAdjacentElement('beforebegin', newDiv);\n};\n\nconst loginField = document.getElementById('login');\nconst passwordField = document.getElementById('password');\nconst button = document.getElementById('submit');\n\nwaitFor(loginField, 'click').then(printMessage);\nwaitFor(passwordField, 'click').then(printMessage);\nwaitFor(button, 'click').then(printMessage);\n\nwaitFor(loginField, 'input').then(printMessage);\nwaitFor(passwordField, 'input').then(printMessage);\n\nwaitFor(loginField, 'blur').then(printMessage);\nwaitFor(passwordField, 'blur').then(printMessage);\nwaitFor(button, 'blur').then(printMessage);\n"],"names":["waitFor","element","eventName","Promise","resolve","reject","addEventListener","e","target","concat","nodeName","id","printMessage","message","newDiv","document","createElement","newContent","createTextNode","className","appendChild","body","insertAdjacentElement","loginField","getElementById","passwordField","button","then"],"version":3,"file":"index.205296b7.js.map"}